project(System.dylib)

cmake_minimum_required(VERSION 2.4.0)
if(COMMAND cmake_policy)
	cmake_policy(SET CMP0003 NEW)
endif(COMMAND cmake_policy)

enable_language(ASM_NASM)

if (NOT "${CMAKE_CXX_COMPILER} ${CMAKE_CXX_COMPILER_ARG1}" MATCHES ".*clang")
	message(FATAL_ERROR "Clang is the only supported compiler (${CMAKE_CXX_COMPILER} used).")
endif (NOT "${CMAKE_CXX_COMPILER} ${CMAKE_CXX_COMPILER_ARG1}" MATCHES ".*clang")

configure_file(config.h.in config.h)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fblocks -std=c++0x")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fblocks")

#find_path(LIBCXX_INCLUDE_DIR c++/v1/vector)
#if (DEFINED LIBCXX_INCLUDE_DIR)
#    message(STATUS "Found libcxx in ${LIBCXX_INCLUDE_DIR}")
#else (DEFINED LIBCXX_INCLUDE_DIR)
#    message(FATAL_ERROR "libcxx not found")
#endif (DEFINED LIBCXX_INCLUDE_DIR)

#include_directories(${LIBCXX_INCLUDE_DIR})

include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../util)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../libmach-o)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../../include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../../include/darwin)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../../include/xnu)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../../include/xnu/mach)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../../include/xnu/bsd)

ADD_CUSTOM_COMMAND(OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/directmap.nasm"
	COMMAND "${CMAKE_CURRENT_BINARY_DIR}/../../genfuncmap" ARGS "${CMAKE_CURRENT_SOURCE_DIR}/libc/directmap.lst" "${CMAKE_CURRENT_BINARY_DIR}/directmap.nasm")


set(libc_SRCS
	libc/mac.c
	libc/none.c
	libc/popcountdi2.c
	libc/runetable.c
	libc/stack_protector-obsd.c
	libc/err.c
	libc/errno.cpp
	libc/OSAtomic.cpp
	libc/strmode.c
	${CMAKE_CURRENT_BINARY_DIR}/directmap.nasm
	libc/sysctl.cpp
	libc/dir.cpp
	libc/string.cpp
	libc/exec.cpp
	libc/stdio.cpp
	libc/fopsmisc.cpp
	libc/aio.cpp
	libc/mount.cpp
	libc/nextstep.cpp
	libc/arch.cpp
	libc/qsort.cpp
	libc/misc.cpp
	libc/pthread.cpp
	libc/sysconf.cpp
	libc/net.cpp
	libc/getpwent.cpp
	libc/signals.cpp
	libc/termios.cpp
	libc/attrlist.cpp
	libc/spawn.cpp
	libc/xlocale.cpp
	libc/malloc_zone.cpp
	common/auto.cpp
	common/path.cpp
)

set(bsdkern_SRCS
	kernel-bsd/stat.cpp
	kernel-bsd/fopsmisc.cpp
	kernel-bsd/io.cpp
	kernel-bsd/wait.cpp
	kernel-bsd/sockets.cpp
	kernel-bsd/fs.cpp
	kernel-bsd/fcntl.cpp
)

set(machkern_SRCS
	kernel-mach/host.cpp
	kernel-mach/lockset.cpp
	kernel-mach/semaphore.cpp
	kernel-mach/task.cpp
	kernel-mach/time.cpp
	kernel-mach/vm.cpp
	kernel-mach/error.cpp
	kernel-mach/Futex.cpp
	kernel-mach/FutexSemaphore.cpp
	kernel-mach/compat.cpp
)

add_library(System.B.dylib SHARED ${libc_SRCS} ${bsdkern_SRCS} ${machkern_SRCS})
# -luuid to make uuid_ functions available for Darwin apps
target_link_libraries(System.B.dylib -ldl -lpthread -luuid -L../.. -lmach-o -lrt -lssl -lbsd -l:libobjc.so.4)
add_dependencies(System.B.dylib mach-o)

install(TARGETS System.B.dylib DESTINATION "lib${SUFFIX}/darling")

